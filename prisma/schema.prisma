// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
  tasks         Task[]
  accounts      Account[]
  Session       Session[]
}

// Project Model
model Project {
  id               String   @id @default(uuid())
  name             String
  description      String?
  status           String?  // New field for project status
  expectedDuration Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  creatorId String? // Optional: foreign key to User
  creator   User?   @relation(fields: [creatorId], references: [id])

  tasks Task[] // A project can have many tasks
}

// Task Model
model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId String // Foreign key to Project
  project   Project @relation(fields: [projectId], references: [id])

  assignedToId String? // Optional: foreign key to User
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
